class UrlParamManager {
    static getUrlParam(paramName) {
        return document.baseURI
            .split("?")[1]
            ?.split("&")
            ?.find((elm) => elm.startsWith(paramName))
            ?.split("=")[1]
    }
}

const strings = {
    "en": {
        "language": "EN",
        "home": "Home",
        "projects": "Projects",
        "about-me": "About me",
        "my-projects": "My projects",
        "hamstorm-desc": "Hamstörm is a turn based game in which we play as a dwarf hamster who has to warn his people of the imminent invasion of the Chedd'Ore clan. He has to get through the mines of the great Hamsteria city by completing different puzzles to save his people from these horrible rats. During his journey, Hamstörm will need to avoid detection by setting traps and by surprising the rats when they expect him the least.",
        "heritage-desc": "Héritage is a narrative game in which we play as a young woman who needs to pursue her family's tradition of capturing birds for their feathers to complete different orders. This tradition was issued from the family business, a company of over 100 years that specializes in making clothing and fashion items from feathers. In this game, we jump into the young woman's shoes and capture birds to fulfill orders for the different clients of the family business.",
        "bambooza-desc": "Bambooza is a web game platform that is part of a formation for ADHD people in the workplace. It was designed by the <a href=\"https://www.pandaslsj.org/\">Association PANDA Saguenay-Lac-St-Jean</a> in partnership with <a href=\"https://www.eckinox.ca/\">Eckinox</a> and the video game development studio <a href=\"https://totemastudio.com/\">Totema Studio</a>. It includes seven different mini games that each aim to help with certain problems that ADHD people face.",
        "about-me-desc": "I recently obtained my bachelor's degree in video game development at UQAC. I have a passion for programming video games and for video games in general. I also have a degree in computer sciences and mathematics at Cégep de Jonquière. During my studies, I was able to get comfortable using many programming languages and game engines such as Java, Javascript, C#, C++, Unity and Unreal Engine. My time in college also enabled me to develop basic programming skills and to familiarize myself with mathematical concepts as well as physical concepts.",
        "game-trailer-title": "Game trailer",
        "ham-steam-page": "Click here to visit Hamstörm's Steam page!",
        "game-desc-title": "Game description",
        "ham-desc": "Hamsteria's mines were peaceful and thriving until the day the horrible rats of the Chedd'Ore clan attacked! Now, the brave Hamstörm has to get back to the city to warn his people of the arrival of these brutal rodents in their tunnels. Play through a fun and colorful puzzle game, in which you will help Hamstörm make his way through the mines, now infested with terrible rats! Destroying rocks, breaking the ground under their feet, setting traps for them, all means are good to escape the mines in time!",
        "game-contribution-title": "My contribution",
        "ham-contribution-desc": "I initially joined the team late with another programmer. Because we got in when it was a prototype project, we had to transfer the existing mechanics in C++ and also develop new ones. As there were two of us, I worked on most of the mechanics. Here is a list of the mechanics I helped implement : the turn based movement, the characters' behaviors, the destructible environments, the camera controls, the fast travel system (pipes), the trap system (wall trap and destructible floor) and the rewind system.",
        "ham-turns-title": "Turn based movement",
        "ham-turns-desc": "Since the game is turn based, we had to implement a system that only allows characters to move when it is their turn. The turns go as follows: Hamstörm starts and finishes his turn only when he has moved. He is allowed to do bonus actions such as destroying rocks or use a pipe as long as he hasn't moved yet. Then it's the rats' turn, they all move at the same time. When they have moved, the turn ends and another one starts.",
        "ham-behavior-title": "Hamstörm's behavior",
        "ham-behavior-desc": "Hamstörm's behavior is pretty simple. When we click a tile, he will go to that tile. Clicking on a destructible object while being on an adjacent tile and having a pickaxe destroys it. When we click on a pipe while on the adjacent tile, Hamstörm travels through the pipe and comes out the other end. However, we need to know precisely what interactible objects are around Hamstörm to handle the different possible actions. To do that, at the beginning of each turn and after certain actions, we check Hamstörm's surroundings to know which tiles are accessible and which objects are interactible. For the movement, we implemented a system that rewards the player's ability to anticipate the turn's actions: when the player clicks on a tile that isn't directly adjacent to Hamstörm, it creates a movement queue that will automatically move him as the turns complete until he reaches the initial destination. This only counts as one turn for the side objectives.",
        "ham-enemy-behavior-title": "Enemies' behaviors",
        "ham-enemy-behavior-desc": "Among the enemies, we have Soop, the stationary rat. He doesn't move and will only attack Hamstörm if he is on the tile in front of him. Then we have Gouda, the mobile rat. He moves one tile at a time according to a predetermined path and he loops that path until the level ends. Gouda only attacks Hamstörm if he is in his way. Finally, we have Slinky who is an upgraded version of Gouda. He also has a predetermined path, but it is in a straight line. He only starts to move when Hamstörm enters his line of sight and moves two tiles at a time. He continues his movement each turn until he comes back to his intial tile (like a slinky) and only attacks Hamstörm if he is in his way.",
        "ham-destruct-title": "Destructible environments",
        "ham-destruct-desc": "An important aspect of the game is environemental destruction. Hamstörm can destroy multiple objects such as rocks or walls that block his path, damaged floor tiles to set traps for the rats, or other objects that are part of objectives. To destroy these objects, Hamstörm needs to be on an adjacent tile and have a pickaxe in hand. The pickaxes are a one use item that are destroyed once used. There is also another type of pickaxe that is used to destroy the objects that are part of objectives.",
        "ham-cam-title": "Camera controls",
        "ham-cam-desc": "To allow the player to fully analyze the levels, we needed a controllable camera. The camera is initially in isometric view and can move. We can also rotate it by 90 degree steps, zoom-in and zoom-out. An option is also available to rotate the camera freely, without being limited to 90 degree steps. When the player moves the camera, it stops locking on Hamstörm. The player can then recenter the camera on Hamstörm with a key and it will follow him. The camera can be moved with the mouse or keyboard.",
        "ham-pipes-title": "<u>Fast travel</u> (Pipes)",
        "ham-pipes-desc": "In certain levels, we have pipes that allow Hamstörm to move quickly across the level. Each pipe has two entraces that are linked. When Hamstörm is in front of a pipe and the player clicks on it, he will come out the other end of the pipe.",
        "ham-traps-title": "Traps",
        "ham-traps-desc": "According to the level layout, some enemies are unreachable and have to be trapped to be eliminated. The first trap is a wall trap. It is composed of a pressure plate and a projectile launching device. When any character steps on the pressure plate, this activates the trap and the projectile is launched. It eliminates any rodent it touches, wether it be Hamstörm or the rats. The second and last trap is the destructible floor. When it is hit by a pickaxe, it is weakened and any rodent that walks over it will fall to their death.",
        "ham-rewind-title": "Rewind",
        "ham-rewind-desc": "The most technical part of the project was the rewind system. Implementing this feature forced us to tweak our turn based system many times. Its functionality is pretty simple on paper : we have a stack of turns where each turn has a list of actions that we keep in memory. We fill this stack as the turns play out. Each action keeps data in memory such as positions, actor references, etc. When we rewind a turn, we pop the last turn and cancel all the actions of that turn with the data stored in memory. We use a stack to make sure that the turns are reverted in the reverse order of which they were played. In reality, we had tons of issues making it work like intended. There were always small details that we forgot to revert which caused all the turns to be desynchronized once we reverted the turn.",
        "ham-bugs-title": "Bugs encountered",
        "ham-bugs-desc": "During the development of Hamstörm, we had multiple bugs... interesting ones for sure. To add a slightly more humorous touch, here are some bugs that made us smile during the development of our game :",
        "game-challenges-title": "Development challenges",
        "ham-challenges-desc": "The biggest challenge was the synchronization of turns, which caused a lot of trouble when rewinding. Each action had to be in the right turn, otherwise the revert didn't cancel all the actions of the turn, which caused desynchronization. We had to implement many conditions to fix that issue like waiting for the projectile of the wall trap to be done moving before entering a new turn for example. This made the turn end early and the rat died on the next turn. We then had to revert two turns instead of one to revive the rat and revert the projectile. Another challenge was to synchronize all actions with the visuals of the game (with the help of our technical artist). This was also the source of many bugs during the development of our game. To summarize, synchronizing the different elements that are in our game was our main challenge. When developing a turn based game, we have to make sure that these elements have the correct timing which is a challenge. Despite these difficulties, we succeeded in making the game what we intended and I learned so much during the development of this project.",
        "heritage-itchio": "Click here to play the game!",
        "heritage-contribution-desc": "I mainly worked on programming the bird's movement and behavior. I also worked on integrating the orders logic to the user interface and the seed mechanic. The implementations of these features are explained below.",
        "heritage-ai-title": "Artificial intelligence",
        "heritage-ai-desc": "When the bird is scared, it flees and needs to find a fleeing point accessible to it, in the opposite direction of the player. If the bird can't find one, it will go towards the player but further away. The fleeing distance is determined by the bird's dectection system. For instance, if the player is moving fast, the bird will go further away from the player. When it finds its fleeing point, the bird starts to fly towards it. The flying is implemented with a <a href=\"https://easings.net/#easeOutCubic\" target=\"_blank\"><i><u>ease-out cubic</u></i></a> curve that determines the height of the flight according to the progress of the movement towards the fleeing point. We also implemented obstacle avoidance to make sure the bird acts naturally.",
        "heritage-ai-desc-2": "At regular time intervals during its movement, the bird raycasts in the direction of its movement. This allows it to detect obstacles in front of it. When the raycast hits an object, the bird raycasts in multiple directions to for a cone. It choses one direction from a raycast that hasn't hit any obstacle and that is the closest to the destination (fleeing point) direction. It then takes that new direction. If the bird doesn't find any valid direction, it extends the angle of the detection cone to find a valid direction to avoid the obstacles.",
        "heritage-orders-title": "Orders integration with the user interface",
        "heritage-orders-desc": "As the goal of the game is to complete orders, it is important that they are visible to the player. I worked on linking the order features with the user interface. I created a user interface that allows the player to view the different orders and to complete them. The orders are generated randomly and i also randomize the visuals of the order when they are created. These visuals include client images and paper textures. I also implemented the order visuals in the HUD. The different user interfaces update as the player completes orders. It is important to note that I didn't participate in the design nor the creation of the visuals, only the composition of the interfaces.",
        "heritage-seed-title": "Seed mechanic",
        "heritage-seed-desc": "To allow the player to capture the birds that are unreachable, we implemented a seed mechanic. It allows the player to attract the birds. When a bird detects a seed, it flies towards it to go eat it. I worked on the bird's seed detection as well as its movement towards it. The bird detects the seed if it is in a certain radius around it. Then, if its state allows it (the bird needs to be calm and not fleeing), it flies towards it and eats it for a certain amount of time. While it's eating, the bird is less sensitive to the player. Its senses are diminished and it becomes easier to capture.",
        "heritage-challenges-desc": "The artificial intelligence definitively was the hardest part of this project. We spent a lot of time trying to determine how the bird should behave and how it should move to make it act as natural as possible. The obstacle avoidance was really challenging. It was difficult for us to design a reliable system that would detect obstacles in the bird's way and that would avoid them in a natural way. We had numerous bugs during the development of this system, here is a couple: the bird kept moving left to right because it couldn't find a valid direction, it struggled to avoid bigger obstacles, the bird flew into walls, it stayed blocked and many other bugs. Handling the different parameters of the bird's detection to make sure it was startled easily was also an important challenge in the artificial intelligence.",
        "bambooza-platform": "Click here to visit the platform!",
        "bambooza-desc-title": "Platform description",
        "bambooza-contribution-desc": "This project was done in collaboration with the Eckinox and Totema Studio. These two teams shared tasks in terms of web development and game design. My task was to program two mini games on the platform: <i>The Procrastination Beach</i> and <i>The Well of Adaptation</i>. These mini games were made with Phaser in typescript and with Vue 3.0. There was also a small part of each of them to tie with the back-end.",
        "bambooza-beach-title": "Procratination Beach",
        "bambooza-beach-desc": "Procrastination Beach is a mini game that works on the motivation and the ability to create an environment suitable for work of ADHD people. The goal is to score as much points as possible by clicking crabs in a limited time. Each crab gets you a certain amout of points. However, the beach is filled with obstacles behind which the crabs can hide. With the help of the broom in the backpack, that is a bit like a toolbox, we can remove these obstacles to see better. There is also music, that you can turn off with the broom, in this mini game to add difficulty focusing.",
        "bambooza-beach-crabs-title": "Crabs",
        "bambooza-beach-crabs-desc": "When the player clicks on a crab, it flips over and falls on its back. After that, we cannot click on it anymore to gain points and we have to wait for it to flip back on its legs. The crabs gradually come out from the sand randomly and they will all be out before half the time is up.",
        "bambooza-beach-points-title": "Points system",
        "bambooza-beach-points-desc": "Each crab is initially worth a 100 points. If the player clicks another crab within a certain window of having clicked one before, a combo starts and the points are multiplied. Each subsequent crab inscreases the combo by 1x. The maximum combo is 5x, so a crab can be worth 500 points if the player is quick and skilled. The combo is lost if he/she doesn't click on another crab in time.",
        "bambooza-beach-obstacles-title": "Obstacles",
        "bambooza-beach-obstacles-desc": "The obstacles appear at the beginning of the level and cannot be removed until the player obtains the broom. Afer a dialogue, the player is rewarded with the broom and can remove obstacles. When the broom is selected, the time stops to give the player time to clear the obstacles. Once removed, the obstacles cannot reappear.",
        "bambooza-well-title": "Well of Adaptation",
        "bambooza-well-desc": "The Well of Adaptation is a mini game that works on the adaptation capacity of ADHD people. In this mini game, the player needs to craft a mecanism to collect water from the well. To do so, there is an inventory bar with different objects at the bottom of the screen. The player needs to find a series of combinations to craft different parts of the mecanism and assemble them to repair the well. There is also a weather system that can influence the combinations. Finally, as the player crafts parts of the mecanism, he/she can place them on the well to repair it.",
        "bambooza-well-craft-title": "Crafting system",
        "bambooza-well-craft-desc": "In the middle of the screen, there is a zone where the player can combine items to craft others. If he/she clicks on the craft button, we verify if the combination is valid. If so, we destroy the objects if they are single-use items and we give the player the result of the craft recipe. If not, we return the items to the inventory. The player gets indications on which items are correct with checkmarks and which items are incorrect with 'X's.",
        "bambooza-well-weather-title": "Weather system",
        "bambooza-well-weather-desc": "While playing, the weather continuously changes in cycles. Every X amount of seconds, the weather changes. There are certain recipes that require a specific weather to be crafted. For instance, to craft a fire, the weather needs to be sunny. To prevent the player from having to wait, he/she can click on the weather to change it.",
        "bambooza-well-glasses-title": "Glasses",
        "bambooza-well-glasses-desc": "The glasses allow the player to get informations on the items that can help determine in which recipe they are used. When the player equips the glasses and clicks on an object, these informations are displayed. The informations can be on the necessary weather, which recipe the object is used in or with what other object to combine it.",
        "bambooza-challenges-desc": "I had some trouble with the combo system when the player clicks on crabs quickly. I had to start a timer whenever a crab was clicked and when another is clicked, check if it was in time. I also had some difficulty pausing the flip animation of the crabs when the player selects the broom. They didn't pause initially when the game was paused, but i figured it out quickly. With the well, the hardest was the crafting system. At first, i had trouble knowing which items were part of a recipe and if so, which recipe to take to give indications to the player if the object has multiple uses. Keeping the items in the same display order when moving them around was also harder than expected.",
        "team-title": "Team members",
        "team-desc": "Here is the list of the team members as well as their specializations in the project:",
        "quick-links": "Quick links",
        "learn-more": "Learn more",

    },
    "fr": {
        "language": "FR",
        "home": "Accueil",
        "projects": "Projets",
        "about-me": "À propos",
        "my-projects": "Mes projets",
        "hamstorm-desc": "Hamstörm est un jeu tour par tour dans lequel on incarne un hamster nain qui doit avertir son peuple de l'invasion imminente du clan Chedd'Or. Il doit parcourir les mines de la grande cité de Hamsteria en complétant différents puzzles et s'y en échapper afin de pouvoir sauver son peuple de l'invasion de ces dangereux rats sans pitié. Durant son périble, Hamstörm fera preuve de ruse en tendant des pièges aux rats et en les prenant par suprise quand ils s'y attendent le moins.",
        "heritage-desc": "Héritage est un jeu narratif dans lequel on incarne une jeune femme qui doit poursuivre la tradition familiale en capturant des oiseaux pour compléter des commandes. Cette tradition est issue de la compagnie familiale, une compagnie de plus de 100 ans, qui se spécialise dans la confection de divers articles et vêtements faits avec des plumes. Dans le jeu, on plonge dans la vie de la jeune femme où elle doit attraper des oiseaux pour compléter les commandes des clients de la compagnie familiale.",
        "bambooza-desc": "Bambooza est une plateforme de jeu en ligne, issue d'une formation pour les personnes TDAH en milieu de travail. Elle a été conçue par l'<a href=\"https://www.pandaslsj.org/\">Association PANDA Saguenay-Lac-St-Jean</a> en partenariat avec <a href=\"https://www.eckinox.ca/\">Eckinox</a> et le studio de développement de jeux vidéo <a href=\"https://totemastudio.com/\">Totema Studio</a>. Elle comprend sept mini-jeux différents qui visent chacun à travailler certains problèmes causé par le TDAH.",
        "about-me-desc": "J'ai récemment obtenu mon diplôme en développement de jeux vidéo à l'UQAC. Je suis passionné par la programmation de jeux vidéo et par les jeux vidéo en général. Je suis aussi diplômé en Sciences informatiques et mathématiques au cégep de Jonquière. Durant mon parcours, j'ai pu me familiariser avec plusieurs langages de programmation et moteurs de jeu comme Java, Javascript, C#, C++, Unity et Unreal Engine. Mon temps au cégep m'a également permis de développer des compétences de base en programmation et de me familiariser avec des concepts des mathématiques et de la physique.",
        "game-trailer-title": "Bande annonce du jeu",
        "ham-steam-page": "Cliquez ici pour visiter la page Steam de Hamstörm!",
        "game-desc-title": "Description du jeu",
        "ham-desc": "Les mines de la ville d'Hamsteria étaient paisibles et prospères, jusqu'au jour où les horribles rats du clan Chedd'Or sont passés à l'attaque! Désormais, le vaillant Hamstörm doit retourner vers la ville pour avertir ses semblables de l'arrivée de ces vilains rongeurs dans leurs tunnels. Parcourez un jeu de puzzle amusant et coloré, dans lequel vous aiderez Hamstörm à se frayer un chemin dans les différentes galeries de la mine, maintenant infestées de terribles rats! Que ce soit en détruisant des cristaux, en brisant le sol sous leurs pieds ou en leur tendant des pièges, tous les moyens sont bons pour arriver à temps à la sortie de la mine!",
        "game-contribution-title": "Ma contribution",
        "ham-contribution-desc": "J'ai rejoint l'équipe avec un autre programmeur alors que le projet était en cours de route. Comme ce projet était un projet prototype, nous avons du transférer le projet en C++, incluant toutes les anciennes mécaniques, et développer de nouvelles mécaniques. Comme nous étions deux, j'ai travaillé sur la plupart d'entre elles. Voici une liste des mécaniques dont j'ai participé à implémenter: le mouvement tour par tour, le comportement des personnages, les environnements destructibles, le contrôle de la caméra, le système de déplacement rapides (tuyaux), le système de piège (piège mural et plancher destructible) et un système de retour en arrière.",
        "ham-turns-title": "Mouvement tour par tour",
        "ham-turns-desc": "Comme le jeu comporte un système de tour par tour, nous avons du implémenter un système qui permet aux différents personnages de se déplacer seulement quand c'est leur tour. Les tours sont implémentés comme suit: Hamstörm commence et termine son tour seulement quand il a terminé de bouger. Il peut donc faire des actions bonus pendant son tour comme briser des rochers ou encore prendre un tuyau tant qu'il est immobile. Ensuite, c'est au tour des rats, ils bougent tous en même temps et une fois qu'ils ont terminé de bouger, le tour se termine et un autre commence.",
        "ham-behavior-title": "Comportement de Hamstörm",
        "ham-behavior-desc": "Le comportement de Hamstörm est assez simple. Lorsqu'on clique sur une tuile, il ira sur cette dernière. Cliquer sur un objet destructible en étant sur la case adjacente et en ayant une pioche le détruit. Lorsqu'on clique sur un tuyau en étant sur la case adjacente, il prend le tuyau et se rend à l'autre bout. Par contre, nous devons savoir ce qui se trouve aux alentours de Hamstörm pour gérer les différentes actions qu'il peut faire. Pour ce faire, au début de chaque tour et après certaines actions, nous analysons les alentours de Hamstörm pour savoir quelles cases seront accessibles et quels objets seront interactibles. Pour le déplacement, nous avons implémenté un système qui permet de récompenser la capacité du joueur à prévoir les actions des tours: lorsque le joueur clique une case accessible qui n'est pas directement adjacente à Hamstörm, cela crée une file de mouvement qui déroulera les tours automatiquement et Hamstörm se rendra à la case qui a été cliquée au début. Cela compte seulement pour un tour dans les objectifs secondaires.",
        "ham-enemy-behavior-title": "Comportements des ennemis",
        "ham-enemy-behavior-desc": "Parmi les ennemis, on retrouve Soop qui est le rat immobile. Il ne se déplace pas et n'attaquera Hamstörm que s'il est sur la case devant lui. On retrouve également Gouda qui est le rat mobile. Il se déplace d'une case à la fois selon un chemin prédéterminé et répète ce chemin jusqu'à la fin du niveau. Il attaquera seulement Hamstörm s'il est sur son chemin. Finalement, on retrouve Slinky qui est une version améliorée de Gouda. Il a également une chemin prédéterminé, mais qui forme une ligne droite. Il se déplace seulement quand Hamstörm entre dans son champ de vision et se déplace de 2 cases à la fois. Il continue de bouger à chaque tour jusqu'à ce qu'il revienne sur sa case départ et n'attaquera Hamstörm que s'il est sur son chemin.",
        "ham-destruct-title": "Environnements destructibles",
        "ham-destruct-desc": "Un aspect important du jeu est la destruction d'environnements. Hamstörm peut détruire différents objets tels que des rochers ou des murs qui lui bloquent le chemin, des tuiles endommagées pour tendre des pièges à ses ennemis ou encore, d'autres objets qui font partie d'objectifs. Pour détruire ces derniers, Hamstörm doit être sur une case adjacente à l'objet et avoir une pioche en main. Les pioches n'ont qu'une seule utilisation et sont détruites par la suite. Il y a également un autre type de pioche pour détruire les objets qui constituent des objectifs.",
        "ham-cam-title": "Contrôles de la caméra",
        "ham-cam-desc": "Pour permettre au joueur de pouvoir bien analyser les niveaux, nous avions besoin d'une caméra contrôlable. La caméra est initialement en vue isométrique et peut se déplacer. On peut également la tourner à coups d'angles de 90 degrés, \"zoomer\" et \"dézoomer\". Une option est disponible pour permettre à la caméra de tourner librement, sans être limité à des angles de 90 degrés. Lorsque le joueur se déplace avec la caméra, elle ne suivra plus Hamstörm. Il peut alors recentrer la caméra sur Hamstörm et la forcer à le suivre en appuyant sur une touche. La caméra peut être contrôlée avec la souris ou avec les touches du clavier.",
        "ham-pipes-title": "<u>Déplacement rapide</u> (Tuyaux)",
        "ham-pipes-desc": "Dans les différents niveaux, on retrouve des tuyaux qui permettent à Hamstörm de se déplacer rapidement à travers le niveau. Chaque tuyau a deux entrées qui sont reliées. Lorsque Hamstörm est devant un tuyau et que le joueur clique dessus, il sera téléporté de l'autre côté du tuyau.",
        "ham-traps-title": "Pièges",
        "ham-traps-desc": "Selon la disposition du niveau, certains ennemis sont innateignables et doivent être piégés pour s'en débarasser. Le premier est le piège mural. Il est composé d'une dalle ainsi que d'un dispositif de lancement de projectile. Lorsqu'un personnage appuie sur la dalle, cela active le piège et le projectile est lancé. Il élimine n'importe quel rongeur qu'il touche, que ce soit Hamstörm ou les rats. Le deuxième et dernier piège est le plancher destructible. Lorsqu'il est touché par une pioche, il est fragilisé et n'importe quel rongeur qui passe par dessus tombera dans le vide.",
        "ham-rewind-title": "Retour en arrière",
        "ham-rewind-desc": "La partie la plus technique du projet est le retour en arrière. L'implémentation de cette fonctionnalité nous a forcé à revoir plusieurs fois notre système de tours. Son fonctionnement est assez simple en théorie: on a une pile de tours où chaque tour a une liste d'actions qu'on garde en mémoire, on rempli cette pile au fur et à mesure des tours. Chaque action garde en mémoire différentes données comme des positions, des références vers les acteurs, etc. Lorsqu'on revient en arrière, on dépile le dernier tour et on annule chacune des actions faites au cours du tour en fonction des données présentes dans l'action. Nous utilisons une pile pour s'assurer que les tours soient annulés dans l'ordre inverse qu'ils ont été joués. En pratique, il nous a causé énormément de problèmes. Il y avait souvent des petils détails qu'on oubliait de faire revenir en arrière, ce qui faisait en sorte que le retour en arrière ne fonctionnait pas comme prévu.",
        "ham-bugs-title": "Bugs rencontrés",
        "ham-bugs-desc": "Durant le développement de Hamstörm, nous avons rencontrés plusieurs bugs... disons, plutôt intéressants. Histoire d'apporter une touche un peu plus humoristique, voici quelques bugs qui nous ont fait sourire pendant le développement de notre jeu :",
        "game-challenges-title": "Défis de conception",
        "ham-challenges-desc": "Le plus gros défi a été au niveau de la synchronisation des tours, ce qui a causé énormément de problème lors du retour en arrière. Chaque action devait être dans le bon tour, sinon le retour en arrière n'annulait pas toutes les actions qu'il devait pour le tour en question. Nous avons du mettre plusieurs conditions pour régler ce type de problème, comme par exemple, attendre que les projectiles aient terminé de bouger. Cela faisait en sorte que le tour se terminait et que le rat mourait dans le tour suivant. On devait donc revenir en arrière de deux tours au lieu de juste un pour annuler la mort du rat et le lancement du projectile. Un autre défi a été de synchroniser toutes les actions avec les visuels de notre jeu (avec la coopération de notre artiste technique). Cela a également été la source de plusieurs bugs au travers du développement. En somme, la synchronisation des différents éléments qui compose notre jeu a été le principal défi. En développant un jeu tour par tour, on doit s'assurer que tous les éléments aient le bon timing, ce qui constitue un grand défi. Malgré les difficultés, nous avons réussi à réaliser notre vision et j'ai appris énormément de ce projet.",
        "heritage-itchio": "Cliquez ici pour essayer le jeu!",
        "heritage-contribution-desc": "Je me suis occupé principalement de la programmation du mouvement de l'oiseau et j'ai contribué au développement de son comportement. J'ai également fait l'intégration des commandes dans l'interface utilisateur et j'ai travaillé sur la mécanique de graine. La suite vous expliquera comment les différentes fonctionnalités sont implémentées.",
        "heritage-ai-title": "Intelligence artificielle",
        "heritage-ai-desc": "Quand l'oiseau est effrayé, il s'enfuit et doit trouver un point de fuite accessible pour lui, en direction opposé du joueur. S'il n'en trouve pas, il ira en direction du joueur, mais plus loin. La distance du point de fuite est déterminée en fonction du système de détection de l'oiseau. Par exemple, si le joueur se se déplace rapidement, l'oiseau sera plus effrayé et se sauvera plus loin. Lorsqu'il a trouvé son point de fuite, l'oiseau commence à se déplacer vers ce dernier et vole dans sa direction. Pour le vol, l'oiseau suit une courbe <a href=\"https://easings.net/#easeOutCubic\" target=\"_blank\"><i><u>ease-out cubic</u></i></a> qui détermine sa hauteur en fonction de la progression de son parcours vers le point de fuite. Nous avons également implémenté de l'évitement d'obstacles afin que notre oiseau puisse agir naturellement.",
        "heritage-ai-desc-2": "À chaque intervalle de temps lors de son mouvement, l'oiseau trace un rayon dans la direction de son mouvement qui lui permet de détecter des obstacles. Lorsque celui-ci touche un objet, il génère des rayons dans un cone devant lui. L'oiseau choisira la direction d'un rayon qui n'a pas détecté d'obstacles et qui se rapproche le plus possible de la direction désirée pour se rendre à la destination (point de fuite). L'oiseau se tourne ensuite vers le nouveau point et continue son mouvement vers le nouveau point généré. Si l'oiseau ne trouve pas de direction valide, il étend l'angle de détection d'obstacles et il génère d'autres rayons afin de trouver une direction valide où il n'y a pas d'obstacles.",
        "heritage-orders-title": "Intégration des commandes avec l'interface utilisateur",
        "heritage-orders-desc": "Comme l'objectif du jeu est de remplir des commandes, il est important que celles-ci soient visibles pour le joueur. Je me suis donc occupé de lier les fonctionnalités des commandes avec l'interface utilisateur. J'ai créé une interface utilisateur qui permet d'afficher les différentes commandes et de les compléter. Les commandes sont générées aléatoirement et je me suis occupé de générer des styles aléatoires également lors de leur création. Ces styles comprennent les images des clients ainsi que les différentes textures du papier. J'ai également implémenté cet affichage dans le HUD. Les différentes interfaces utilisateur s'actualisent au fur et à mesure que le joueur complète les commandes. À noter que je n'ai pas participé au design ni création des différents éléments d'interface, seulement la composition des interfaces.",
        "heritage-seed-title": "Mécanique de graine",
        "heritage-seed-desc": "Pour pouvoir capturer les oiseaux qui sont en hauteur, nous avons implémenté une mécanique de graine. Celle-ci permet d'attirer les oiseaux. Lorsqu'un oiseau détecte une graine, il s'envole vers la graine pour aller la manger. J'ai participé à la détection de la graine par l'oiseau et également au mouvement de l'oiseau vers elle. L'oiseau détecte la graine si elle est dans un certain rayon autour de lui. Ensuite, si son état le permet (il doit être calme et non entrain de se sauver par exemple), il ira vers la graine et y restera pendant quelques temps. Pendant que l'oiseau mange la graine, il est moins sensible au joueur. Ses sens sont diminués et il devient plus facile à capturer.",
        "heritage-challenges-desc": "L'intelligence artificielle de l'oiseau était définitivement le plus grand défi de conception. Nous avons passé beaucoup de temps à déterminer comment l'oiseau devait agir et de quelle façon il se déplacerait pour que l'oiseau se comporte de la façon la plus naturelle possible. L'évitement d'obstacles est la partie où nous avons eu le plus de difficultés. Il était difficile pour nous de concevoir un système fiable qui allait détecter les différents obstacles dans le chemin de l'oiseau et qui allait les éviter de façon logique et naturelle. Nous avions de nombreux bugs durant le développement de ce système, en voici quelques uns : l'oiseau bougait constamment de gauche à droite devant un obstacle puisqu'il ne trouvait pas de direction valide, l'oiseau avait de la difficulté à éviter des obstacles larges, l'oiseau fonçait dans les murs, l'oiseau restait bloqué, et plein d'autres. Gérer les différents paramètres de la détection afin de s'assurer que l'oiseau soit assez farouche a aussi été un autre défi important lié à l'intelligence artificielle.",
        "bambooza-platform": "Cliquez ici pour visiter la plateforme!",
        "bambooza-desc-title": "Description de la plateforme",
        "bambooza-contribution-desc": "Ce projet a été fait en collaboration avec les équipes d'Eckinox et de Totema Studio. Ces deux équipes se partageaient des tâches au niveau du développement web et du game design. Pour ma part, j'ai réalisé la programmation de deux mini-jeux de la plateforme: <i>La Plage de la Procrastination</i> et <i>Le Puits de l'Adaptation</i>. Ces mini-jeux ont été réalisés avec Phaser en typescript et avec Vue 3.0. Il y avait également une petite partie de chacun de ces derniers à lier avec le \"back-end\".",
        "bambooza-beach-title": "Plage de la Procrastination",
        "bambooza-beach-desc": "La Plage de la Procrastination est un mini-jeu qui travaille la motivation et la capacité à créer un environnement propice au travail des personnes TDAH. Le but est de cliquer sur le plus de crabes possibles en faisant un maximum de points dans un temps déterminé. Chaque crabe rapporte un certain nombre de points. Par contre, la plage est remplie d'obstacles, derrière lesquels, les crabes peuvent se cacher. À l'aide du balai dans le sac à dos ,qui est un peu une sorte de sac à outils, on peut enlever les obstacles et y voir plus clair. Il y a également de la musique, que l'on peut désactiver avec le balai, pour ajouter de la difficulté à se concentrer.",
        "bambooza-beach-crabs-title": "Crabes",
        "bambooza-beach-crabs-desc": "Lorsque le joueur clique sur un crabe, il est renversé et tombe sur son dos. Il ne peut ensuite plus cliquer sur lui et obtenir des points jusqu'à ce qu'il se relève après un certain temps. Les crabes sortent graduellement du niveau aléatoirement et seront tous sortis avant que la moitié du temps soit écoulée.",
        "bambooza-beach-points-title": "Système de pointage",
        "bambooza-beach-points-desc": "Chaque crabe rapporte initialement 100 points. Si le joueur clique rapidement sur un autre crabe après en avoir cliqué un auparavant, avant un certain délai, un combo débute et les points sont multipliés. Chaque crabe subséquent augmente le combo de x1. Le multiplicateur ou le combo va jusqu'à x5, un crabe peut donc valoir 500 points si le joueur est habile et rapide. Il perd le combo dès qu'il ne clique pas un autre crabe à temps.",
        "bambooza-beach-obstacles-title": "Obstacles",
        "bambooza-beach-obstacles-desc": "Les obstacles apparaissent au début du niveau et ne peuvent pas être enlevés tant que le joueur n'obtient pas le balai. Après un dialogue, le joueur obtient le balai et peut enlever les obstacles. Lorsqu'il sélectionne le balai, le temps s'arrète dans le jeu pour lui laisser le temps d'enlever les obstacles. Une fois enlevé, les obstacles ne réapparaissent pas.",
        "bambooza-well-title": "Puits de l'Adaptation",
        "bambooza-well-desc": "Le puits de l'adaptation est un jeu qui travaille sur la capacité d'adaptation des personnes TDAH. Dans ce jeu, le joueur doit construire un mécanisme pour récupérer de l'eau dans le puits. Pour se faire, différents objets sont disponibles en bas de l'écran. Le joueur doit trouver une série de combinaisons à faire pour construire différents objets et finalement construire le mécanisme pour récupérer l'eau du puits. Il y a également un système de météo qui peut influencer les différentes combinaisons possibles. Pour finir, au fur et à mesurer que le joueur fabrique des objets utiles au mécanisme, il peut les poser sur le puits pour le réparer.",
        "bambooza-well-craft-title": "Système de fabrication",
        "bambooza-well-craft-desc": "Dans le milieu de l'écran, il y a une zone où le joueur peut poser des objets pour en fabriquer d'autres. Lorsqu'il clique sur le bouton fabriquer, on vérifie si la combinaison d'objets forme une recette. Si oui, on détruit les objets utilisés s'ils sont à usage unique et on donne le nouvel objet fabriqué au joueur. Sinon, on retourne les objets dans l'inventaire. Le joueur aura des indications sur quels objets peuvent former une recette sous forme de crochets pour indiquer les bons items et de \"X\" pour indiquer les mauvais items.",
        "bambooza-well-weather-title": "Système de météo",
        "bambooza-well-weather-desc": "Durant la période de jeu, la météo change continuellement par cycles. À chaque période de temps, la météo change. Il y a certaines recettes qui peuvent seulement être faites si la bonne météo est en cours. Comme par exemple, pour faire un feu, il faut que la météo soit ensoleillé. Pour empêcher le joueur de devoir attendre la météo, il peut cliquer sur la météo pour la changer lui-même.",
        "bambooza-well-glasses-title": "Lunettes",
        "bambooza-well-glasses-desc": "Les lunettes permettent d'obtenir des informations sur les objets qui peuvent aider à déterminer dans quelle recette ils sont utilisés. Lorsque le joueur équipe les lunettes et qu'il clique sur un objet, ces informations sont affichées. Elles donnent des indices sur quelle météo est nécessaire, quelle recette l'objet est utilisé ou encore avec quoi le combiner.",
        "bambooza-challenges-desc": "J'ai eu quelques difficultés avec le système de combo lorsque le joueur clique rapidement sur des crabes. Je devais faire en sorte qu'on commence un timer dès que le joueur clique sur un crabe et lorsqu'un autre crabe est cliqué, vérifier si ce timer est dans les temps. J'ai aussi eu un peu de difficulté avec la fonction pause lorsque le balai est sélectionné, les animations de renversement des crabes ne se mettaient pas sur pause initialement, mais ça a été réglé assez rapidement. Au niveau du puits, le plus dûr a été le système de fabrication. Au début, j'avais de la difficulté à savoir si les objets utilisés faisaient partie d'une recette et si oui, quelle recette prendre pour donner des indications au joueur si cet objet avait plusieurs utilités. Garder les objets dans le même ordre d'affichage lorsqu'on les bouge et qu'on les ramène a aussi été plus difficile que prévu.",
        "team-title": "Membres de l'équipe",
        "team-desc": "Voici la liste des membres de l'équipe ainsi que leurs spécialisations dans le projet :",
        "quick-links": "Liens rapides",
        "learn-more": "En savoir plus"
    }
}

window.onload = () => {
    if ((urlLang = UrlParamManager.getUrlParam("lang")) != undefined) {
        if (urlLang.toLowerCase() == "fr" || urlLang.toLowerCase() == "en") localStorage.setItem("language", urlLang)
    }

    //Setting default language to french if no language found
    if (localStorage.getItem("language") == undefined){
        localStorage.setItem("language", "fr")
    } 

    document.getElementById("langButton").onclick = () => langSwitch()

    updateStrings()

}

function langSwitch() {
    let lang = localStorage.getItem("language");

    lang == "fr" ? lang = "en" : lang = "fr"

    localStorage.setItem("language", lang)

    updateStrings()
}

function updateStrings() {
    document.querySelectorAll("[data-string]")
        .forEach((elm) => {
            elm.innerHTML = strings[localStorage.getItem("language").toLowerCase()][elm.attributes["data-string"].value]
        })
}